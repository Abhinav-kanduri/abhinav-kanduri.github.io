<section class="comments">
  <h3 class="text-2xl font-semibold mb-6">Comments</h3>
  
  <div id="existing-comments" class="space-y-6 mb-8">
    <!-- Example comments (in a real implementation, these would be loaded from a database) -->
    <div class="comment bg-gray-50 dark:bg-primary-800 p-4 rounded-lg">
      <div class="flex items-center mb-3">
        <img src="/images/avatar-1.png" alt="User" class="w-8 h-8 rounded-full mr-3" />
        <div>
          <div class="font-medium">Alex Johnson</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">2 days ago</div>
        </div>
      </div>
      <p class="text-gray-700 dark:text-gray-300">
        Great article! The RAG implementation really helped me understand how to structure my own system. One question though: have you found any performance differences between different embedding models?
      </p>
      <div class="mt-3 flex items-center">
        <button class="text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
          </svg>
          Helpful (12)
        </button>
        <button class="ml-4 text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400">Reply</button>
      </div>
    </div>
    
    <div class="comment bg-gray-50 dark:bg-primary-800 p-4 rounded-lg">
      <div class="flex items-center mb-3">
        <img src="/images/avatar-2.png" alt="User" class="w-8 h-8 rounded-full mr-3" />
        <div>
          <div class="font-medium">Taylor Rivera</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">5 days ago</div>
        </div>
      </div>
      <p class="text-gray-700 dark:text-gray-300">
        I've been working with Kafka for streaming data pipelines, and your architecture pattern for handling high-volume throughput saved me from making several critical mistakes. Thanks for the detailed explanation!
      </p>
      <div class="mt-3 flex items-center">
        <button class="text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
          </svg>
          Helpful (8)
        </button>
        <button class="ml-4 text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400">Reply</button>
      </div>
    </div>
  </div>
  
  <!-- Comment form -->
  <form id="comment-form" class="bg-gray-50 dark:bg-primary-800 p-6 rounded-lg">
    <h4 class="text-lg font-medium mb-4">Leave a comment</h4>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Name</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          required
          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-primary-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-accent-500 focus:border-transparent"
        />
      </div>
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email (will not be published)</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required
          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-primary-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-accent-500 focus:border-transparent"
        />
      </div>
    </div>
    
    <div class="mb-4">
      <label for="comment" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Comment</label>
      <textarea 
        id="comment" 
        name="comment" 
        rows="4" 
        required
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-primary-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-accent-500 focus:border-transparent"
      ></textarea>
    </div>
    
    <div class="flex items-center mb-4">
      <input 
        type="checkbox" 
        id="save-info" 
        name="save-info" 
        class="text-accent-600 rounded focus:ring-accent-500 mr-2"
      />
      <label for="save-info" class="text-sm text-gray-700 dark:text-gray-300">
        Save my name and email for the next time I comment
      </label>
    </div>
    
    <button 
      type="submit" 
      class="btn btn-primary px-6"
    >
      Post Comment
    </button>
  </form>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const commentForm = document.getElementById('comment-form');
    const existingComments = document.getElementById('existing-comments');
    
    commentForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Get form data
      const nameInput = document.getElementById('name') as HTMLInputElement;
      const commentInput = document.getElementById('comment') as HTMLTextAreaElement;
      
      if (!nameInput || !commentInput || !existingComments) return;
      
      const name = nameInput.value;
      const commentText = commentInput.value;
      
      if (!name || !commentText) return;
      
      // Create new comment element (in a real app, this would be sent to a server)
      const newComment = document.createElement('div');
      newComment.className = 'comment bg-gray-50 dark:bg-primary-800 p-4 rounded-lg animate-fade-in';
      
      newComment.innerHTML = `
        <div class="flex items-center mb-3">
          <div class="w-8 h-8 rounded-full mr-3 bg-accent-600 flex items-center justify-center text-white font-bold">
            ${name.charAt(0).toUpperCase()}
          </div>
          <div>
            <div class="font-medium">${name}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Just now</div>
          </div>
        </div>
        <p class="text-gray-700 dark:text-gray-300">
          ${commentText}
        </p>
        <div class="mt-3 flex items-center">
          <button class="text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
            </svg>
            Helpful (0)
          </button>
          <button class="ml-4 text-sm text-gray-500 hover:text-accent-600 dark:text-gray-400 dark:hover:text-accent-400">Reply</button>
        </div>
      `;
      
      // Add the new comment to the beginning of the comments section
      existingComments.insertBefore(newComment, existingComments.firstChild);
      
      // Reset the form
      commentForm.reset();
      
      // Scroll to the new comment
      newComment.scrollIntoView({ behavior: 'smooth', block: 'center' });
    });
    
    // Add click handler for helpful buttons
    document.querySelectorAll('.comment button').forEach(button => {
      if (button.textContent?.includes('Helpful')) {
        button.addEventListener('click', function() {
          const currentCount = parseInt(this.textContent.match(/\d+/)[0]);
          this.innerHTML = this.innerHTML.replace(/\d+/, (currentCount + 1).toString());
          this.classList.add('text-accent-600', 'dark:text-accent-400');
          button.setAttribute('disabled', 'true');
        });
      }
    });
  });
</script>