---
interface Props {
  tags: string[];
  showAll?: boolean;
  limit?: number;
}

const { tags, showAll = false, limit = 5 } = Astro.props;

const displayTags = showAll ? tags : tags.slice(0, limit);
const hasMore = !showAll && tags.length > limit;

const getTagColor = (tag: string) => {
  // Map tags to consistent colors
  const tagColors = {
    'generative-ai': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
    'data-engineering': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    'mlops': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
    'cloud-services': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
    'python': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
    'sql': 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
    'terraform': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
    'tutorials': 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300',
    'case-studies': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
  };
  
  // Default color for tags not in the map
  return tagColors[tag] || 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';
};
---

<div class="flex flex-wrap gap-2">
  {displayTags.map((tag) => (
    <a 
      href={`/tags/${tag}`}
      class={`text-xs px-2.5 py-1 rounded-full hover:opacity-80 transition-opacity ${getTagColor(tag)}`}
    >
      {tag.replace(/-/g, ' ')}
    </a>
  ))}
  
  {hasMore && (
    <span class="text-xs px-2.5 py-1 rounded-full bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300">
      +{tags.length - limit} more
    </span>
  )}
</div>